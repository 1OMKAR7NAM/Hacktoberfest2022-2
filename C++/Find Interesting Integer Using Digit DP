//         PROBLEM : FIND INTERESTING INTEGERS
// Problem
// Let us call an integer interesting if the product of its digits is divisible by the sum of its digits. 
// You are given two integers A and B. Find the number of interesting integers between A and B (both inclusive).
//                      USING DIGIT DP

#include<bits/stdc++.h>
using namespace std;
#define ll long long
string a, b;
ll la, lb;
ll dp1[13][2][120][120], dp2[13][2][120][120];
ll count1(int index, bool tight, int left, int mod, int sum){
    if(index==la){
        return (mod==0 && left==0);
    }
    
    if(dp1[index][tight][mod][left]!=-1){
        return dp1[index][tight][mod][left];
    }
    
    ll &ans = dp1[index][tight][mod][left];
    ans=0;
    
    
    int i, r;
    
    if(tight==1){
        r=a[index]-48;
    }else{
        r=9;
    }
    
    for(i=0; i<=r; i++)
    {
        if(i<=(left)){
            if(tight==1 && i==r){
                if(left==sum && i==0)
                ans+=count1(index+1, 1, left-i, mod, sum);
                else
                ans+=count1(index+1, 1, left-i, (mod*i)%sum, sum);
            }else{
                if(left==sum && i==0)
                ans+=count1(index+1, 0, left-i, mod, sum);
                else
                ans+=count1(index+1, 0, left-i, (mod*i)%sum, sum);
            }
        }
    }
    
    return ans;
}

ll count2(int index, bool tight, int left, int mod, int sum)
{
    if(index==lb){
        return (mod==0 && left==0);
    }
    
    if(dp2[index][tight][mod][left]!=-1){
        return dp2[index][tight][mod][left];
    }
    
    ll &ans = dp2[index][tight][mod][left];
    ans=0;
    
    int i, r;
    
    if(tight==1){
        r=b[index]-48;
    }else{
        r=9;
    }
    
    for(i=0; i<=r; i++)
    {
        if(i<=(left)){
            if(tight==1 && i==r){
                if(left==sum && i==0)
                ans+=count2(index+1, 1, left-i, mod, sum);
                else
                ans+=count2(index+1, 1, left-i, (mod*i)%sum, sum);
            }else{
                if(left==sum && i==0)
                ans+=count2(index+1, 0, left-i, mod, sum);
                else
                ans+=count2(index+1, 0, left-i, (mod*i)%sum, sum);
            }
        }
    }
    
    return ans;
    
}
int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    
    ll ans, i, j, t, t1, k, l, a1;
    
    cin>>t;
    
    for(t1=1; t1<=t; t1++){
        cin>>a1;
        a1--;
        a=to_string(a1);
        cin>>b;
        
        
        la=a.size();
        lb=b.size();
        
        
        ans=0;
        for(int s=1; s<=9*lb; s++)
        {
            for(i=0; i<lb; i++)
            {
                for(j=0; j<2; j++)
                {
                    for(k=0; k<=9*lb; k++)
                    {
                        for(l=0; l<=9*lb; l++)
                        {
                            dp1[i][j][k][l]=dp2[i][j][k][l]=-1;
                        }
                    }
                }
            }
            ans+=count2(0, 1, s, 1, s);
            ans-=count1(0, 1, s, 1, s);
        }
        
        
        cout<<"Case #"<<t1<<": "<<ans<<"\n";
    }
}
